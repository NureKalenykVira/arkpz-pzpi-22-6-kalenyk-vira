Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи № 3
з дисципліни «Аналіз та рефакторинг коду»












Харків 2024

1 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи
    	Метою роботи є розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи.

1.2	 Хід роботи
1.2.1	Розробити бізнес логіку серверної частини програмної системи. 
1)	 Розрахунок рекомендованої дати споживання продукту. 
Система прогнозує рекомендовану дату споживання продукту на основі умов зберігання (температура, вологість) та початкового терміну придатності. Це дозволяє користувачу краще планувати споживання продуктів. Алгоритм:
	Отримати дані про умови зберігання продукту (температура, вологість) із сенсорів;
	Використати початковий термін придатності продукту як базовий показник;
	На основі математичних моделей і допустимих меж розрахувати скорочення або подовження терміну придатності;
	Додати розраховану дату в рекомендації для користувача.
2)	Бізнес-логіка для відправки сповіщень про наближення кінця терміну придатності. 
Система надсилає нагадування про наближення кінця терміну придатності продукту за два дні до його завершення. Алгоритм:
	Щодня перевіряти всі продукти у базі даних;
	Якщо до закінчення терміну придатності залишилося два дні, надсилати користувачу сповіщення;
	Сповіщення містить назву продукту, дату завершення та рекомендацію його використати.
3)	Бізнес-логіка для відправки сповіщень про закінчення терміну придатності.
Система надсилає сповіщення про продукти, термін придатності яких вже завершився. Алгоритм:
	Щодня перевіряти всі продукти у базі даних;
	Якщо термін придатності продукту закінчився, надсилати користувачу сповіщення;
	Сповіщення містить назву продукту, дату завершення терміну та рекомендацію його утилізувати.
4)	Бізнес-логіка для аналізу умов зберігання продуктів.
Система аналізує отримані дані від сенсорів та визначає, чи відповідають умови зберігання рекомендованим. Алгоритм:
	Отримати дані від сенсорів про температуру, вологість тощо;
	Зіставити отримані значення з рекомендованими для кожного продукту;
	У разі невідповідності надсилати користувачу сповіщення з рекомендаціями щодо покращення умов зберігання.
5)	Бізнес-логіка для генерації звітів про зберігання продуктів.
Система формує персоналізовані звіти для користувачів про стан їхніх продуктів. Алгоритм:
	Зібрати інформацію про всі продукти користувача, включаючи їх стан, умови зберігання та терміни придатності;
	Сформувати звіт з рекомендаціями щодо використання продуктів;
	Надати користувачу можливість перегляду звіту у клієнтському додатку або веб-інтерфейсі.
6)	Бізнес-логіка для обробки аномальних даних сенсорів.
Система перевіряє дані, що надходять від сенсорів, на коректність. У разі виявлення аномалій користувач отримує сповіщення. Алгоритм:
	Отримати дані від сенсорів у реальному часі.
	Перевірити значення на відповідність допустимим межам.
	Якщо дані виходять за межі норми, зафіксувати проблему та надіслати користувачу сповіщення із деталями та рекомендаціями.

1.2.2	 Розробити функції адміністрування серверної частини програмної системи. 
У серверній частині програмної системи буде реалізовано різні рівні адміністрування та ролі користувачів, кожна з яких має специфічні функціональні можливості:
1)	Адміністратор продуктів та сенсорів.
Цей адміністратор відповідає за управління основними даними системи, такими як продукти, холодильники та сенсори. Функції:
	Додавання, редагування та видалення продуктів у системі;
	Управління даними холодильників, включаючи зміну їхніх параметрів та видалення;
	Налаштування параметрів сенсорів, таких як тип, статус або місце розташування;
	Відстеження історії змін і аномальних даних сенсорів.
2)	Адміністратор бази даних.
Цей адміністратор забезпечує технічний стан бази даних та її ефективне функціонування. Функції:
	Оптимізація структури бази даних і запитів;
	Створення регулярних резервних копій для забезпечення збереження даних;
	Відновлення бази даних у разі аварійної ситуації;
	Управління доступом до бази даних для інших ролей.
3)	Адміністратор бізнес-логіки.
Адміністратор бізнес-логіки відповідає за налаштування правил роботи системи, які впливають на функціональність серверної частини. Функції:
	Налаштування алгоритмів розрахунку рекомендованих дат споживання продуктів;
	Визначення меж допустимих значень для сенсорних даних;
	Налаштування частоти та параметрів формування звітів для користувачів;
	Відповідальність за конфігурацію бізнес-логіки без доступу до особистих даних користувачів.
4)	Глобальний адміністратор. 
Глобальний адміністратор має повний контроль над системою та всіма іншими ролями. Функції:
	Призначення, зміна прав доступу або видалення інших адміністраторів;
	Видалення користувачів та їхніх даних із системи у разі потреби;
	Налаштування загальних параметрів системи, таких як політики безпеки або інтеграція з платіжними сервісами;
	Перегляд загальних звітів про діяльність усіх користувачів.
5)	Користувач системи.
Це звичайний користувач, який взаємодіє із системою для управління своїми продуктами та холодильниками. Функції:
	Додавання нових продуктів із зазначенням термінів придатності.
	Перегляд своїх продуктів, холодильників та сенсорів.
	Оновлення особистої інформації.
	Перегляд звітів і отримання сповіщень про закінчення терміну придатності продуктів.

1.2.3	Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини. 
Для реалізації бізнес-логіки та функцій адміністрування серверної частини програмної системи було створено структуровану серверну архітектуру з чітким розподілом ролей: GlobalAdmin, DBAdmin, LogicAdmin, ProductAdmin, та RegularUser. Кожна роль має окремі функції та доступ до відповідних маршрутів, які контролюються middleware (authenticateToken та checkRole). Уся логіка реалізована через модульний підхід із використанням Node.js, Express та MySQL.
Прикладом реалізованої логіки є розрахунок рекомендованих дат споживання продуктів. Розрахунок базується на поточних умовах зберігання (температура, вологість) і початковому терміні придатності:
1.	if (temperature > 10) adjustedDate.setDate(adjustedDate.getDate() - 2);
2.	if (humidity > 80) adjustedDate.setDate(adjustedDate.getDate() - 1);
Таким чином, серверна частина була розроблена із чітким дотриманням вимог масштабованості, безпеки та простоти розширення. Реалізовані функції проходили тестування через Postman для забезпечення коректності роботи API.

1.2.4	Перевірити роботу серверної частини системи.
Перевіримо роботу створеної системи. 
 
Рисунок 1 – Перевірка запису аномальних даних сенсорів для LogicAdmin
 
Рисунок 2 – Перевірка резервного копіювання бази даних для DBAdmin

1.3	 Висновок
В ході виконання даної лабораторної роботи було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи. Система реалізована з урахуванням розподілу ролей, таких як GlobalAdmin, DBAdmin, LogicAdmin, ProductAdmin та RegularUser, кожна з яких отримала чітко визначені функціональні можливості. Для забезпечення безпеки та контролю доступу були впроваджені механізми авторизації й перевірки ролей. Основні функції бізнес-логіки включають розрахунок рекомендованої дати споживання продуктів, надсилання сповіщень про наближення чи завершення терміну придатності, аналіз умов зберігання та обробку аномальних даних сенсорів, а також генерацію звітів для користувачів. Функції адміністрування охоплюють управління продуктами, холодильниками, сенсорами, базою даних і налаштування бізнес-правил. Реалізація була перевірена через API з використанням Postman. 

1.4	 Список використаних джерел
Для виконання цієї роботи були використані наступні джерела:
1.	MySQL. Офіційна документація системи управління базами даних [Електронний ресурс]. – Режим доступу: https://dev.mysql.com/doc/ – Дата доступу: 19.12.2024.
2.	Node.js. Довідник та документація серверної платформи [Електронний ресурс]. – Режим доступу: https://nodejs.org/en/docs/ – Дата доступу: 19.12.2024.
3.	Docker. Офіційна документація системи контейнеризації [Електронний ресурс]. – Режим доступу: https://docs.docker.com/ – Дата доступу: 19.12.2024.
4.	Postman. Документація для інструмента тестування API [Електронний ресурс]. – Режим доступу: https://learning.postman.com/docs/ – Дата доступу: 19.12.2024.

1.5	 Посилання
Посилання на репозиторій git hub: https://github.com/NureKalenykVira/arkpz-pzpi-22-6-kalenyk-vira/tree/main/Task3.
Посилання на відео-доповідь: https://youtu.be/iWJcSspQfYY.
