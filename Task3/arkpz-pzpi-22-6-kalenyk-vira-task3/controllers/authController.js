const jwt = require('jsonwebtoken');
const db = require('../db');
const bcrypt = require('bcryptjs');

/**
 * –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const loginUser = async (req, res) => {
    console.log('‚úÖ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è loginUser –Ü–ó –¢–û–ß–ù–û –¢–ê–ö–û–ì–û –§–ê–ô–õ–£');
    console.log('üî• –í–∏–∫–æ–Ω–∞–Ω–æ loginUser');
    try {
        const { email, password } = req.body;

        const [users] = await db.query('SELECT * FROM Users WHERE Email = ?', [email]);
        if (users.length === 0) {
            return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.' });
        }

        const user = users[0];
        const isPasswordValid = await bcrypt.compare(password, user.Password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å.' });
        }

        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω
        const [existingTokens] = await db.query(
            'SELECT Token, Expiration FROM UserTokens WHERE UserID = ? AND Expiration > NOW()',
            [user.UserID]
        );

        if (existingTokens.length > 0) {
            const existing = existingTokens[0];
            return res.json({
                message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ (–ø–æ–≤–µ—Ä–Ω—É—Ç–æ —ñ—Å–Ω—É—é—á–∏–π —Ç–æ–∫–µ–Ω).',
                token: existing.Token,
                expiration: existing.Expiration
            });
        }

        // 2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (1 —Ä—ñ–∫)
        const token = jwt.sign(
            { userId: user.UserID, role: user.Role },
            process.env.JWT_SECRET,
            { expiresIn: '365d' }
        );

        const expiration = new Date();
        expiration.setFullYear(expiration.getFullYear() + 1);

        await db.query(`
  INSERT INTO UserTokens (UserID, Token, Expiration)
  VALUES (?, ?, ?)
  ON DUPLICATE KEY UPDATE Token = VALUES(Token), Expiration = VALUES(Expiration)
`, [user.UserID, token, expiration]);


        res.json({
            message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ (–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω).',
            token,
            expiration
        });

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error.message);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.', detail: error.message });
    }
};

/**
 * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
const registerUser = async (req, res) => {
    try {
        const { name, email, password, role } = req.body;

        console.log('–î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', { name, email, password, role });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º email
        const [existingUsers] = await db.query('SELECT * FROM Users WHERE Email = ?', [email]);
        if (existingUsers.length > 0) {
            return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.' });
        }

        // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        const hashedPassword = await bcrypt.hash(password, 10);

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        const [result] = await db.query(
            'INSERT INTO Users (Name, Email, Password, Role) VALUES (?, ?, ?, ?)',
            [name, email, hashedPassword, role || 'RegularUser'] // –†–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        );

        const userId = result.insertId;

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞ 1 —Ä—ñ–∫)
const token = jwt.sign(
    { userId, role: role || 'RegularUser' },
    process.env.JWT_SECRET,
    { expiresIn: '365d' }
);

const expiration = new Date();
expiration.setFullYear(expiration.getFullYear() + 1);

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É
await db.query(`
  INSERT INTO UserTokens (UserID, Token, Expiration)
  VALUES (?, ?, ?)
  ON DUPLICATE KEY UPDATE Token = VALUES(Token), Expiration = VALUES(Expiration)
`, [userId, token, expiration]);

        res.status(201).json({
            message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.',
            userId,
            token,
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.' });
    }
};

module.exports = { loginUser, registerUser };