Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи № 4
з дисципліни «Аналіз та рефакторинг коду»












Харків 2024
1 РОЗРОБКА IoT КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)
1.1 Мета роботи
    	Метою роботи є розробка IoT клієнта (бізнес-логіки та функцій налаштування).
1.2	 Хід роботи
1.2.1	Розробити будову програмного забезпечення ІоТ клієнта.
IoT-клієнта буде розроблено, як частину програмної системи для моніторингу умов зберігання продуктів. Програмне забезпечення клієнта буде базуватися на платформі Node.js.
Основним завданням IoT-клієнта є моделювання роботи сенсорів, таких як температура, вологість і RFID-мітки. Дані, згенеровані клієнтом, будуть аналізуватися для визначення поточного стану умов зберігання продуктів і передаватися на сервер для обробки. Протокол передачі даних — HTTP. Формат переданих даних — JSON. Архітектура IoT-клієнта буде складатися з таких компонентів:
1.	Модуль генерації даних. Замість реальних сенсорів буде використовуватися генерація випадкових даних для імітації роботи сенсорів. Для цього будуть застосовані вбудовані функції Node.js, які створюватимуть випадкові значення в заданих межах.
2.	Модуль обробки даних. Буде перевірятися відповідність згенерованих значень встановленим нормам. Якщо значення виходитиме за межі норми, фіксується аномалія, а коефіцієнт умов зберігання продукту знижується.
3.	Модуль передачі даних. Реалізує HTTP-клієнт для відправки даних на сервер. Передача включає як згенеровані значення сенсорів, так і результати їхньої обробки.
4.	Модуль сповіщення. Формуватиме повідомлення про аномальні умови і надсилатиме його на сервер для інформування адміністратора.

1.2.2	Створити UML діаграму прецедентів для ІоТ клієнта.
Створимо UML діаграму прецедентів для IoT клієнта:
 
Рисунок 1 - UML діаграма прецедентів для IoT клієнта

1.2.3	Розробити бізнес логіку (математину обробку повʼязаних із предметною областю даних) та функції налаштування ІоТ клієнта.
Бізнес-логіка IoT-клієнта орієнтована на забезпечення моніторингу умов зберігання продуктів у холодильнику за допомогою сенсорів температури, вологості та RFID-зчитувачів. Вона включає в себе обробку отриманих даних, їх аналіз для виявлення аномалій та передачу цих даних на сервер. Алгоритми враховують відхилення від встановлених порогових значень та дозволяють отримувати точні оцінки стану різних зон холодильника.
Основні компоненти бізнес-логіки:
1.	Обробка даних сенсорів:
	Дані температури, вологості та RFID-зчитувачів обробляються в реальному часі;
	Значення перевіряються на відповідність пороговим значенням для визначення нормальних умов зберігання;
	У разі відхилення значень за межі норми фіксується аномалія, яка передається на сервер для інформування адміністратора.
2.	Моніторинг кількох зон холодильника:
	IoT-клієнт підтримує одночасну роботу з кількома сенсорами, що дозволяє відстежувати умови в різних зонах;
	Для кожного сенсора обчислюється коефіцієнт відповідності умов нормам, який враховується під час загальної оцінки стану зони.
3.	Передача даних на сервер:
	Дані надсилаються у форматі JSON через HTTP-протокол;
	Включаються показники сенсорів (температура, вологість, ідентифікатор RFID) та оцінка умов зберігання.
Функції налаштування IoT-клієнта включають:
1.	Налаштування порогових значень сенсорів:
	Забезпечує можливість встановлення індивідуальних порогів температури, вологості для різних типів продуктів;
	Дані отримуються із серверної частини або задаються вручну адміністратором.
2.	Управління сенсорами:
	Налаштування ідентифікаторів сенсорів для забезпечення коректної роботи з кількома пристроями;
	Можливість активації/деактивації сенсорів в залежності від потреби.
3.	Налаштування частоти передачі даних:
	Дозволяє встановлювати інтервал генерації даних сенсорами;
	Оптимізує навантаження на мережу при передачі даних.
4.	Ідентифікація зон моніторингу:
	Конфігурування зон холодильника, які обслуговуються сенсорами;
	Для кожної зони встановлюються унікальні параметри налаштування.
5.	Форматування даних для передачі у форматі JSON.
Щодо взаємодії з сервером, то IoT-клієнт підтримує передачу даних у реальному часі, дані передаються з урахуванням багатозонного моніторингу.

1.2.4	Створити діаграму діяльності для ІоТ клієнта.
Створимо діаграму діяльності для IoT клієнта:
 
Рисунок 2 – Діаграма діяльності для IoT клієнта

1.2.5	Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
IoT-клієнт реалізований для моніторингу умов зберігання продуктів у холодильниках, використовуючи сенсори температури, вологості та RFID-зчитувачі. Бізнес-логіка включає генерацію даних сенсорів у реальному часі, їх перевірку на відповідність встановленим пороговим значенням та ідентифікацію аномалій. У разі виявлення аномалій інформація передається на сервер для подальшого аналізу. Дані обробляються по зонах кожного холодильника, а результат включає температурні, вологісні показники, унікальний RFID-ідентифікатор та коефіцієнт відповідності нормам. Передача даних на сервер виконується через HTTP у форматі JSON. Реалізовано функціонал динамічного оновлення порогових значень та частоти передачі даних, які отримуються із серверної частини. Клієнт також підтримує багатозонний моніторинг, дозволяючи одночасно обробляти кілька холодильників та зон. Це забезпечує комплексний контроль за умовами зберігання, гнучкість у налаштуваннях зон та сенсорів, а також адаптивність до різних типів продуктів.

1.2.6	Перевірити роботу ІоТ клієнта.
Протестуємо роботу IoT клієнта. 
 
Рисунок 1  - Успішна ініціалізація клієнта
 
Рисунок 2  - Запит на самостійну відправку даних сенсора на сервер
 
Рисунок 3  - Успішне виявлення клієнтом аномальних показників

1.3	 Висновки
У ході виконання роботи було розроблено IoT-клієнт для моніторингу умов зберігання продуктів у холодильниках. Реалізовано обробку даних від сенсорів температури, вологості та RFID-зчитувачів, а також алгоритми для виявлення аномалій та оцінки стану зон. Забезпечено підтримку багатозонного моніторингу та динамічного оновлення налаштувань, таких як порогові значення та частота передачі даних.

1.4	 Список використаних джерел
Для виконання цієї роботи були використані наступні джерела:
1.	Lucidchart. Онлайн-інструмент для створення діаграм [Електронний ресурс]. – Режим доступу: https://lucid.app/lucidchart – Дата доступу: 19.12.2024.
2.	Node.js. Довідник та документація серверної платформи [Електронний ресурс]. – Режим доступу: https://nodejs.org/en/docs/ – Дата доступу: 19.12.2024.
3.	Postman. Документація для інструмента тестування API [Електронний ресурс]. – Режим доступу: https://learning.postman.com/docs/ – Дата доступу: 19.12.2024.

1.5	 Посилання
Посилання на репозиторій git hub: https://github.com/NureKalenykVira/arkpz-pzpi-22-6-kalenyk-vira/tree/main/Task4.
Посилання на відео-доповідь: https://youtu.be/yniLVOVAsQ0.
