Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи № 5
з дисципліни «Аналіз та рефакторинг коду»












Харків 2024
1 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ 
1.1 Мета роботи
    	Метою роботи є розгортання програмної системи та демонстрація її роботи.
 Хід роботи
1.2.1	Розгорнути реалізовану програмну систему.
	Для розгортання програмної системи було використано платформу Render для хостингу серверної частини системи та JawsDB MySQL для бази даних, що працює в хмарі через Heroku. Кожен компонент системи був налаштований та підключений до хмарного середовища відповідно до вимог проекту.
	Спочатку було створено обліковий запис на Render, яка є хмарною платформою для розгортання веб-сервісів та фонових процесів.Після реєстрації та авторизації в аккаунті було створено новий сервіс для програмної системи. Для зручності розгортання був використаний Node.js, тому проект було підготовлено до деплою через репозиторій на GitHub. Для цього було налаштовано підключення між Render та репозиторієм на GitHub. На панелі Render був обраний варіант Create New Web Service, що дозволило створити веб-сервіс для запуску серверної частини додатку. Після цього був обраний репозиторій на GitHub, де зберігався код системи.
Був вказаний порт, на якому буде працювати сервер (звичайно, використано process.env.PORT, оскільки Render автоматично надає порт через цю змінну середовища). Система була налаштована на автоматичний запуск після кожного деплою.
	Оскільки IoT клієнт працює як фоновий процес і не потребує відкритих портів, було вирішено використовувати тип Background Worker в Render. Це дозволило системі працювати без відкритого HTTP порту, виконуючи лише завдання збору та відправки даних на сервер без прийому запитів.
	Для зберігання даних програми було обрано JawsDB MySQL, який є популярним сервісом для хостингу MySQL баз даних в хмарі.
Було додано аддон JawsDB до додатку на Heroku через Heroku Dashboard. Після підключення JawsDB MySQL до додатку на Heroku, з'явилася змінна JAWSDB_URL, яка містить URL для підключення до бази даних. Цей URL був використаний для налаштування змінних середовища в файлі .env, щоб коректно підключити серверну частину до бази даних. У файлі .env були змінені змінні для підключення до бази даних:
1.	DB_URL=mysql://opqa6rya8dtl8ydu:vxzxn9hllt198v3t@dz8959rne9lumkkw.chr7pe7iynqr.eu-west-1.rds.amazonaws.com:3306/cmcncldkx1usmm2h
2.	DB_USER=opqa6rya8dtl8ydu
3.	DB_PASSWORD=vxzxn9hllt198v3t
4.	DB_HOST=dz8959rne9lumkkw.chr7pe7iynqr.eu-west-1.rds.amazonaws.com
5.	DB_PORT=3306
6.	DB_NAME=cmcncldkx1usmm2h	
	Після внесення змін до .env файлу серверна частина системи успішно підключилася до бази даних, і перевірка була проведена за допомогою логів сервера на Render, де було підтверджено, що база даних працює правильно.

1.2.2	Перевірити та налаштувати роботу розгорнутої програмної системи.
Було перевірено логи на хмарній платформі, щоб переконатись у правильному запуску сервера та відсутності помилок під час роботи.
 
Рисунок 1 – Логи сервера з платформ Render, що демонструють статус роботи сервера
Було перевірено доступність API для отримання здоров'я сервера та перевірки роботи функціональних ендпоінтів.
 
Рисунок 2 – Перевірка API через Postman
Було перевірено підключення серверної частини до бази даних JawsDB MySQL на Heroku, щоб переконатись, що з'єднання працює належним чином.
 
Рисунок 3 – Налаштування підключення до бази даних на Heroku
Було перевірено наявність таблиць та правильність структури в базі даних, а також виконано тестові запити для перевірки роботи з даними.
 
Рисунок 4 – Перевірка даних у базі даних через MySQL Workbench
Було перевірено, чи коректно працює IoT клієнт, збираючи дані сенсорів і відправляючи їх на сервер.
 
Рисунок 5 – Логи роботи IoT клієнта, що демонструють відправку даних
Було перевірено, чи IoT клієнт відправляє сенсорні дані на сервер через API.
 
Рисунок 6 – Скриншот POST запиту до API для відправки сенсорних даних
Було перевірено, чи працює планувальник для періодичного виконання завдань, таких як збір та відправка даних сенсорів.
 
Рисунок 7 – Налаштування періодичних завдань через setInterval
Було перевірено, чи правильно налаштовані права доступу для різних ролей у системі, а також чи працює механізм авторизації та аутентифікації користувачів.
 
Рисунок 8 – Панель адміністрування або логін з перевіркою прав доступу

1.3	 Висновки
У результаті виконаної роботи було успішно розгорнуто програмну систему, яка складається з серверної частини та IoT клієнта для збору даних від сенсорів. Для хостингу серверної частини була обрана платформа Render, а для зберігання даних використовувався хмарний сервіс JawsDB MySQL через Heroku. Після налаштування змінних середовища та підключення до бази даних, сервер успішно з'єднався з нею, і перевірка показала правильну роботу системи.
Було перевірено коректний запуск серверної частини через логи на платформі Render, а також доступність API для перевірки здоров'я сервера і роботи ендпоінтів. Після цього перевірено підключення до бази даних, наявність таблиць та правильність структури. Також успішно тестувалася робота IoT клієнта, який збирав дані сенсорів і відправляв їх на сервер. Всі перевірки, включаючи тестування періодичних завдань та прав доступу для різних ролей, показали коректну роботу програмної системи.

1.4	 Список використаних джерел
Для виконання цієї роботи були використані наступні джерела:
1.	Node.js. Довідник та документація серверної платформи [Електронний ресурс]. – Режим доступу: https://nodejs.org/en/docs/ – Дата доступу: 19.12.2024.
2.	Postman. Документація для інструмента тестування API [Електронний ресурс]. – Режим доступу: https://learning.postman.com/docs/ – Дата доступу: 19.12.2024.
3.	MySQL. Офіційна документація для роботи з MySQL [Електронний ресурс]. – Режим доступу: https://dev.mysql.com/doc/ – Дата доступу: 19.12.2024.
4.	JawsDB. Документація для використання MySQL на платформі Heroku через JawsDB [Електронний ресурс]. – Режим доступу: https://devcenter.heroku.com/articles/jawsdb – Дата доступу: 19.12.2024.
5.	Heroku. Офіційна документація для розгортання додатків на платформі Heroku [Електронний ресурс]. – Режим доступу: https://devcenter.heroku.com/ – Дата доступу: 19.12.2024.
6.	Render. Офіційна документація для розгортання додатків та фонових процесів на Render [Електронний ресурс]. – Режим доступу: https://render.com/docs – Дата доступу: 19.12.2024.

1.5	 Посилання
Посилання на репозиторій git hub: https://github.com/NureKalenykVira/arkpz-pzpi-22-6-kalenyk-vira/tree/main/Task4.
Посилання на відео-доповідь: https://youtu.be/xIdxTwY_Frk.
