Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до практичного заняття № 1
з дисципліни «Аналіз та рефакторинг коду»




Виконала:
ст. гр. ПЗПІ-22-6, 
Каленик Віра Олександрівна

Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович



Харків 2024

1.1 Тема роботи: 
    Правила оформлення програмного коду.	
1.2 Мета роботи:
    Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування TypeScript, а також навчитися аналізувати та проводити рефакторинг код для покращення його якості.
1.3 Хід роботи
	1. Було обрано мову програмування TypeScript для аналізу.
	2. Написано приклади коду для демонстрації правил написання чистого ефективного та підтримуваного коду.
Основні рекомендації написання коду на TypeScript:
1)	Рекомендація: Слід використовувати осмислені назви змінних, функцій та класів, які чітко відображають їх призначення. Уникати скорочень, абревіатур і неочевидних назв.
Опис: Зрозумілі назви полегшують читання та підтримку коду. Ім'я повинно чітко описувати, що робить функція або яке значення зберігає змінна. Це особливо важливо в командній роботі, де інші розробники повинні швидко зрозуміти код.
Приклад:  
1.	// Поганий приклад
2.	function prc(n: number): number {
3.	    return n * 0.9;
4.	}
5.	// Гарний приклад
6.	function calculateDiscount(price: number): number {
7.	    return price * 0.9;
8.	}
2)	Рекомендація: Слід використовувати коментарі для пояснення складної логіки або важливих рішень у коді. Уникати очевидних або зайвих коментарів.
Опис: Коментарі повинні доповнювати код, а не повторювати його зміст. Вони корисні для пояснення специфічних деталей, які можуть бути незрозумілими з першого погляду.
Приклад:  
1.	// Поганий приклад
2.	let price = 100; // Оголошення змінної price
3.	// Гарний приклад
4.	let price = 100; // Початкова ціна товару без знижки
3)	 Рекомендація: Слід використовувати стандартний стиль відступів (наприклад, 2 або 4 пробіли) та додавати порожні рядки для розділення логічних блоків.
Опис: Добре структурований код легше читається та розуміється. Відсутність відступів або порожніх рядків робить код важким для аналізу, тоді як надмірна кількість порожніх рядків виглядає неакуратно.
Приклад:  
1.	// Поганий приклад
2.	function calculateSum(a:number,b:number){return a+b;}
3.	const result=calculateSum(5,10);console.log(result);
4.	// Гарний приклад
5.	function calculateSum(a: number, b: number): number {
6.	    return a + b;
7.	}
8.	
9.	const result = calculateSum(5, 10);
10.	 console.log(result);
4)	Рекомендація: Слід створювати функції, які виконують лише одну конкретну задачу, та уникати надмірної кількості рядків у їхній реалізації.
Опис:  Чіткість функцій означає, що кожна функція повинна мати єдину відповідальність. Це не лише полегшує читання, але й спрощує тестування, налагодження та модифікацію коду. Довгі функції, що виконують кілька завдань одночасно, складно зрозуміти, і вони можуть містити більше помилок. Натомість короткі й чітко визначені функції є більш гнучкими і легкими у використанні.
Приклад:  
1.	// Поганий приклад
2.	function processOrder(order: any): void {
3.	     console.log(`Processing order ${order.id}`);
4.	     if (order.status === "new") {
5.	        order.status = "processed";
6.	        console.log("Order processed");
7.	    } else {
8.	        console.log("Order already processed");
9.	    }
10.	    sendEmail(order.customerEmail);
11.	    console.log("Email sent");
12.	}
13.	// Гарний приклад
14.	function processOrder(order: any): void {
15.	    console.log(`Processing order ${order.id}`);
16.	    if (isNewOrder(order)) {
17.	       markOrderAsProcessed(order);
18.	    }
19.	    notifyCustomer(order.customerEmail);
20.	}
21.	
22.	function isNewOrder(order: any): boolean {
23.	    return order.status === "new";
24.	}
25.	
26.	function markOrderAsProcessed(order: any): void {
27.	    order.status = "processed";
28.	    console.log("Order processed");
29.	}
30.	
31.	function notifyCustomer(email: string): void {
32.	    sendEmail(email);
33.	    console.log("Email sent");
34.	}
5)	Рекомендація: Назва функції повинна чітко відповідати дії, яку вона виконує, або значенню, яке повертає.
Опис:  Імена функцій мають бути осмисленими та відповідати стилю опису дій. Наприклад, функція для обчислення суми депозиту повинна мати назву, яка чітко вказує, що вона розраховує, наприклад, calculateDeposit. Слід уникати загальних або абстрактних назв, таких як process, які не пояснюють суті дії.
1.	Приклад:
2.	// Поганий приклад
3.	function process(x: number, y: number): number {
4.	    return x * (1 + y / 100);
5.	}
6.	// Гарний приклад
7.	function calculateDeposit(initialAmount: number, interestRate: number): number {
8.	    return initialAmount * (1 + interestRate / 100);
9.	}
6)	Рекомендація: Для схожих функцій слід використовувати однакові шаблони оформлення, щоб забезпечити узгодженість у коді.
Опис:  Схожі функції, наприклад, для обробки запитів, мають бути оформлені в одному стилі. Це полегшує розуміння та повторне використання коду. Відсутність шаблонів призводить до плутанини та ускладнює підтримку.
Приклад:
1.	// Поганий приклад
2.	function getUser(id: number): User {
3.	    return fetch(`/api/user/${id}`).then(response => response.json());
4.	}
5.	function addProduct(name: string, price: number): void {
6.	    console.log("Adding product:", name, price);
7.	// Implementation omitted
8.	}
9.	// Гарний приклад
10.	function getUser(id: number): Promise<User> {
11.	    return fetch(`/api/user/${id}`).then(response => response.json());
12.	}
13.	function addProduct(name: string, price: number): Promise<void> {
14.	    console.log("Adding product:", name, price);
15.	    return Promise.resolve();
16.	}
7)	Рекомендація: Слід використовувати однаковий стиль відступів у всьому проєкті (4 пробіли є стандартом у TypeScript). Уникати змішування пробілів і табуляцій.
Опис:  Відступи забезпечують структурування коду та позначають вкладеність блоків. Непослідовне використання відступів ускладнює розуміння коду, створює плутанину та може спричинити помилки, особливо в мовах із суворою залежністю від відступів.
Приклад:  
1.	// Поганий приклад
2.	function calculateInterest(amount:number){
3.	    return amount * 0.05;}
4.	function calculateTotal(amount:number){
5.	    let interest = calculateInterest(amount);
6.	return amount + interest;
7.	}
8.	// Гарний приклад
9.	function calculateInterest(amount: number): number {
10.	    return amount * 0.05;
11.	}
12.	
13.	function calculateTotal(amount: number): number {
14.	    let interest = calculateInterest(amount);
15.	    return amount + interest;
16.	}
8)	Рекомендація: Слід завжди розміщувати фігурні дужки навіть для однорядкових блоків, щоб запобігти помилкам під час додавання нового коду.
Опис: Використання фігурних дужок навіть для однорядкових блоків покращує зрозумілість і запобігає помилкам. Уникнення дужок може створити проблеми під час додавання нових рядків у блок, оскільки можна забути їх додати.
Приклад:  
1.	// Поганий приклад
2.	if (amount > 100) return "High value";
3.	else return "Low value";
4.	// Гарний приклад
5.	if (amount > 100) {
6.	    return "High value";
7.	} else {
8.	    return "Low value";
9.	}
9)	Рекомендація: Слід використовувати логічне вирівнювання операторів для підвищення читабельності, а також вирівнювати довгі вирази в кілька рядків із правильними відступами.
Опис: Довгі вирази, записані в один рядок, стають важкими для читання. Вирівнювання забезпечує зручність роботи з кодом, особливо в умовах із кількома логічними операторами.
Приклад:  
1.	// Поганий приклад
2.	const isEligible = age > 18 && income > 30000 && creditScore > 700;
3.	// Гарний приклад
4.	const isEligible = age > 18 &&
5.	                            income > 30000 &&
6.	                            creditScore > 700;
	3. Створено презентацію в якій розглянуті рекомендації для написання чистого та якісного коду на TypeScript. Слайди презентації наведено у додатку А. 
1.4 Висновок
Для покращення якості коду необхідно дотримуватися основних принципів. Перш за все, це чіткість і зрозумілість іменування змінних, функцій і класів, які забезпечують швидке розуміння коду іншими розробниками та полегшують його вдосконалення. Коментарі до коду повинні пояснювати складні рішення або нестандартні підходи, але не дублювати очевидний код. Добре структурований код із використанням однорідних відступів, порожніх рядків і логічного поділу блоків підвищує його читабельність і спрощує аналіз.
Особливу увагу слід приділяти чіткості функцій і методів — кожна функція повинна виконувати одну конкретну задачу, бути стислою й завершеною. Узгодженість стилю в коді, включаючи використання єдиних шаблонів для схожих функцій і форматування, забезпечує передбачуваність, зручність у тестуванні та інтеграції, а також знижує ризик помилок. Крім того, застосування правил форматування, таких як обов’язкові фігурні дужки чи вирівнювання логічних операторів, підвищує читабельність і допомагає уникати синтаксичних помилок.
1.5 Список використаних джерел
1.	Офіційна документація TypeScript : [вебсайт]. – Режим доступу: https://www.typescriptlang.org/ (дата звернення: 19.11.2024).
2.	Мартін Р. Чистий код: створення, аналіз та рефакторинг / Р. Мартін. – Харків : Пітер, 2019. – 464 с.
3.	Google TypeScript Style Guide : [вебсайт]. – Режим доступу: https://google.github.io/styleguide/tsguide.html (дата звернення: 19.11.2024).
1.6	 Посилання
Посилання на GitHub репозиторій: https://github.com/NureKalenykVira/arkpz-pzpi-22-6-kalenyk-vira/edit/main/Pract1
Посилання на відео доповіді: https://youtu.be/SmrIvDRf8Kg

 
Додаток А
Слайди презентації
 
Рисунок А.1 – Титульний слайд
 
Рисунок А.2 – Зміст презентації
 
Рисунок А.3 – Вступ
 
Рисунок А.4 – Особливості обраної мови програмування
 
Рисунок А.5 – Рекомендація щодо назв змінних, функцій та класів
 
Рисунок А.6 – Рекомендація щодо написання коментарів
 
Рисунок А.7 – Рекомендація щодо відступів
 
Рисунок А.8 – Рекомендація щодо створення функцій
 
Рисунок А.9 – Рекомендація щодо назви функцій
 
Рисунок А.10 – Рекомендація щодо шаблонів оформлення функцій
 
Рисунок А.11 – Рекомендація щодо відступів, пробілів та табуляцій
 
Рисунок А.12 – Рекомендація щодо використання фігурних дужок
 
Рисунок А.13 – Рекомендація щодо логічного вирівнювання операторів
 
Рисунок А.14 – Приклад коду до та після застосування всіх рекомендацій
 
Рисунок А.15 – Висновки
 
Рисунок А.16 – Список використаних джерел
 
Рисунок А.17 – Завершальний слайд
